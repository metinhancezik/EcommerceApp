@using ECommerceView.Models.Payment
@model PaymentViewModel
@{
    ViewData["Title"] = "Ödeme Sayfası";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var totalAmount = ViewBag.TotalAmount;
}

<div class="payment-container mx-auto" style="max-width: 500px;">
    <div class="modal-dialog" role="document">
        <div class="modal-content rounded-4 shadow">
            <div class="modal-header p-4">
                <h1 class="modal-title fs-5">Ödeme Modülü</h1>
            </div>
              <form id="paymentForm" method="post">
                <div class="modal-body py-0 p-4">
                    <div class="odeme-formu p-4">
                        @Html.AntiForgeryToken()

                        <div class="mb-3">
                            <label class="form-label">Sepet Tutarı</label>
                            <div class="input-group">
                                <input type="text" class="form-control" value="@totalAmount.ToString("N2") ₺" readonly />
                                <input type="hidden" name="Price" id="Price" value="@totalAmount" />
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.CardHolderName, "Kart Sahibinin Adı:", new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.CardHolderName, new { @class = "form-control", required = "required" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.CardNumber, "Kart Numarası:", new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.CardNumber, new { @class = "form-control", required = "required", maxlength = "19" })
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-3">
                                @Html.LabelFor(m => m.ExpireMonth, "Ay:", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.ExpireMonth, new { @class = "form-control", placeholder = "AA", required = "required", maxlength = "2" })
                            </div>

                            <div class="col-md-4 mb-3">
                                @Html.LabelFor(m => m.ExpireYear, "Yıl:", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.ExpireYear, new { @class = "form-control", placeholder = "YY", required = "required", maxlength = "2" })
                            </div>

                            <div class="col-md-4 mb-3">
                                @Html.LabelFor(m => m.Cvc, "CVV:", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Cvc, new { @class = "form-control", required = "required", maxlength = "3" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer flex-column p-4">
                    <button type="submit" class="btn btn-lg btn-primary w-100">
                        @totalAmount.ToString("N2") ₺ Öde
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function () {
            // Kart numarası formatı
            $('#CardNumber').on('input', function () {
                var val = $(this).val().replace(/\D/g, '');
                var newVal = '';
                for (var i = 0; i < val.length; i++) {
                    if (i > 0 && i % 4 == 0) {
                        newVal += ' ';
                    }
                    newVal += val[i];
                }
                $(this).val(newVal);
            });

            // Ay kontrolü
            $('#ExpireMonth').on('input', function () {
                var val = $(this).val().replace(/\D/g, '');
                if (val > 12) val = 12;
                if (val.length === 1 && val < 1) val = 1;
                $(this).val(val);
            });

            // Yıl kontrolü
            $('#ExpireYear').on('input', function () {
                var val = $(this).val().replace(/\D/g, '');
                $(this).val(val);
            });

            // CVV kontrolü
            $('#Cvc').on('input', function () {
                var val = $(this).val().replace(/\D/g, '');
                $(this).val(val);
            });

            // Form gönderimi
            $('#paymentForm').on('submit', function (e) {
                e.preventDefault();
                debugger;

                // Form verilerini al
                var formData = {
                    Price: parseFloat($('#Price').val()),
                    CardHolderName: $('#CardHolderName').val(),
                    CardNumber: $('#CardNumber').val().replace(/\s/g, ''),
                    ExpireMonth: $('#ExpireMonth').val(),
                    ExpireYear: $('#ExpireYear').val(),
                    Cvc: $('#Cvc').val()
                };

                console.log('Gönderilecek veri:', formData); // Debug için log
                var token = $('input[name="__RequestVerificationToken"]').val();
                // API isteği
                $.ajax({
                    url: '/payment/process',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    headers: {
                        'RequestVerificationToken': token
                    },
                    beforeSend: function () {
                        // İstek öncesi loading göster
                        Swal.fire({
                            title: 'İşleminiz yapılıyor...',
                            allowOutsideClick: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });
                    },
                    success: function (response) {
                        Swal.close();
                        console.log('API Yanıtı:', response); // Debug için log

                        if (response.status === "success") {
                            Swal.fire({
                                icon: 'success',
                                title: 'Başarılı!',
                                text: 'Ödeme işlemi tamamlandı.',
                                confirmButtonText: 'Tamam'
                            }).then((result) => {
                                window.location.href = '/';
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Hata!',
                                text: response.errorMessage || 'Ödeme işlemi başarısız.'
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        Swal.close();
                        console.error('Hata detayı:', {
                            status: status,
                            error: error,
                            response: xhr.responseText
                        });

                        Swal.fire({
                            icon: 'error',
                            title: 'Hata!',
                            text: 'Bir hata oluştu. Lütfen tekrar deneyin.'
                        });
                    }
                });
            });
        });
    </script>
}